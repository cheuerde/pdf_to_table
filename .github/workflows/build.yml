
name: Build Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            executable_name: extract_windows.exe
            artifact_name: bank_statement_processor_windows
          - os: ubuntu-latest
            executable_name: extract_linux
            artifact_name: bank_statement_processor_linux
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install uv
      run: |
        python -m pip install uv
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade wheel setuptools

    - name: Install Python dependencies
      run: |
        uv pip install --system pyinstaller
        uv pip install --system -r requirements.txt
    
    - name: Build executable
      run: |
        pyinstaller --onefile \
        --name ${{ matrix.executable_name }} \
        --hidden-import "pkg_resources.py2_warn" \
        --hidden-import "PIL._tkinter_finder" \
        --collect-all pdfplumber \
        --collect-all cryptography \
        --exclude-module pathlib \
        extract.py
      shell: bash
    
    - name: Test executable
      run: |
        cd dist
        if [ -f "${{ matrix.executable_name }}" ]; then
          echo "Executable built successfully"
          ls -l "${{ matrix.executable_name }}"
        else
          echo "Executable not found!"
          exit 1
        fi
      shell: bash
    
    - name: Create distribution package
      run: |
        mkdir -p dist/package
        cp dist/${{ matrix.executable_name }} dist/package/
        cp README.md dist/package/ || echo "No README.md found"
        echo "Bank Statement PDF Processor" > dist/package/README.txt
        echo "Version: $(date +'%Y.%m.%d')" >> dist/package/README.txt
        echo "Platform: ${{ matrix.os }}" >> dist/package/README.txt
        echo "" >> dist/package/README.txt
        echo "Instructions:" >> dist/package/README.txt
        echo "1. Double-click the executable" >> dist/package/README.txt
        echo "2. Select the folder containing your PDF bank statements" >> dist/package/README.txt
        echo "3. Select the output folder for the processed files" >> dist/package/README.txt
        echo "4. Wait for processing to complete" >> dist/package/README.txt
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/package/
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write  # Make sure we have write permissions
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List files for debugging
      run: |
        ls -R artifacts/
      shell: bash

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
        files: |
          artifacts/bank_statement_processor_windows/*
          artifacts/bank_statement_processor_linux/*
        body: |
          Bank Statement PDF Processor Release ${{ github.run_number }}
          
          This release includes:
          - Windows executable (extract_windows.exe)
          - Linux executable (extract_linux)
          
          Instructions:
          1. Download the appropriate version for your operating system
          2. Run the executable
          3. Select input folder with PDF files
          4. Select output folder for results
          5. Click Process Files and wait for completion
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}